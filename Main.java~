 
import java.awt.event.*;
import javax.swing.*;
import java.awt.*;
class Main
{
    p panel = new p();
    JFrame f = new JFrame("Tic-Tac-Toe");
    static Color BackgroundColor = Color.pink;
    static Color CrossColor = Color.blue;
    static Color RoundColor = Color.magenta;
    static  boolean single_player = true;
    static int first = 2;// 1=cross and 2=round
    static int sec = 1;// computer=sec and player=first
    static int state[]={0,0,0,0,0,0,0,0,0};
    static boolean tobedone = false;
    static boolean firstMove=false;
    int best[]={4,0,2,6,3,8,1,7,5};
    JMenu Player1,Player2;
    public static void main(String agrs[])
    {
        Main t =new Main();
    }
    public Main()
    {
        f.setSize(600,600);
        f.setVisible(true);
        f.setLayout(new GridLayout(1,1));
        f.add(panel);
        panel.setVisible(true);
        String color[]={"red","pink","orange","yellow","green","magenta","cyan","blue","white","gray","black"};
        {
            JMenuBar mb = new JMenuBar();
            f.setJMenuBar(mb);

            {
                JMenu set = new JMenu("Settings");
                mb.add(set);
                {
                    JMenu bc = new JMenu("Background Color");
                    set.add(bc);

                    JMenuItem BCs[] = new JMenuItem[color.length];
                    for(int i=0;i<color.length;i++)
                    {
                        BCs[i] = new JMenuItem(color[i]);
                        BCs[i].addActionListener(new ColorChoser());
                        BCs[i].setActionCommand("B"+color[i]);
                        bc.add(BCs[i]);
                    }

                }
                {
                    JMenu cc = new JMenu("Cross Color");
                    set.add(cc);

                    JMenuItem CCs[] = new JMenuItem[color.length];
                    for(int i=0;i<color.length;i++)
                    {
                        CCs[i] = new JMenuItem(color[i]);
                        CCs[i].addActionListener(new ColorChoser());
                        CCs[i].setActionCommand("C"+color[i]);
                        cc.add(CCs[i]);
                    }
                }

                {
                    JMenu rc = new JMenu("Round Color");
                    set.add(rc);

                    JMenuItem RCs[] = new JMenuItem[color.length];
                    for(int i=0;i<color.length;i++)
                    {
                        RCs[i] = new JMenuItem(color[i]);
                        RCs[i].addActionListener(new ColorChoser());
                        RCs[i].setActionCommand("R"+color[i]);
                        rc.add(RCs[i]);
                    }
                }

                {
                    JMenuItem vsCom = new JMenuItem("Play against Computer");
                    vsCom.addActionListener(new single_player());
                    set.add(vsCom);

                    JMenuItem vsHum = new JMenuItem("Play against Human");
                    vsHum.addActionListener(new double_player());
                    set.add(vsHum);

                    JMenuItem chang = new JMenuItem("Symbol Interchange");
                    chang.addActionListener(new Interchange());
                    set.add(chang);

                    JMenuItem chance = new JMenuItem("First chance Interchange");
                    chance.addActionListener(new chance());
                    set.add(chance);
                }

                {
                    JMenu mn1 = new JMenu("  |  ");
                    Player2 = new JMenu("Computer:Cross");
                    Player1 = new JMenu("Player:Round");
                    JMenu mn2 = new JMenu("==>>");
                    mb.add(mn1);
                    mb.add(Player1);
                    mb.add(mn2);
                    mb.add(Player2);
                }
            }
        }
    }

    public class p extends JPanel implements MouseListener,MouseMotionListener
    {
        int x,x1;
        int y,y1;
        int heigth = getHeight();
        int width = getWidth();
        int pos[][]={{0,0},{width/3,heigth/3},{((2*width)/3),((2*heigth)/3)},{width,heigth}};

        int win[][]={{0,1,2},
                {3,4,5},
                {6,7,8},
                {0,3,6},
                {1,4,7},
                {2,5,8},
                {0,4,8},
                {2,4,6}};
        p()
        {
            addMouseListener(this);
            addMouseMotionListener(this);

        }

        public void mouseMoved(MouseEvent e)
        {
            x1=e.getX();
            y1=e.getY();
            repaint();
            if(single_player)
            {
                if(firstMove)
                {
                    if(sec==1)
                    {
                        Player1.setLabel("Computer: X Cross ");
                        Player2.setLabel("Player: O Round");
                    }
                    else
                    {
                        Player1.setLabel("Computer : O Round");
                        Player2.setLabel("Player: X Cross");
                    }
                }
                else
                {
                    if(sec==1)
                    {
                        Player1.setLabel("Player: O Round");
                        Player2.setLabel("Computer: X Cross ");
                    }else
                    {
                        Player1.setLabel("Player:: X Cross ");
                        Player2.setLabel("Computer: O Round");
                    }
                }
            }
            else
            {
                if(first==2)
                {
                    Player1.setLabel("O Round");
                    Player2.setLabel("X Cross");
                }else
                {
                    Player1.setLabel("X Cross ");
                    Player2.setLabel("O Round");
                }
            }
            
             bestC();
            if(firstMove && allEmpty())
                {
                    state[nextComputer()]=sec;
                    repaint();
                    e.consume();
                }

        }

        public void mouseDragged(MouseEvent e)
        {
        }

        public void mouseClicked(MouseEvent e)
        { 

        }

        public void mousePressed(MouseEvent e)
        {
            bestC();
            if(won()!=0 || finish()){
                e.consume();
                if(e.getClickCount()>=1)
                {
                    for(int i=0;i<9;i++)
                        state[i]=0;
                }
                tobedone=false;
                repaint();
                
            }
        }

        public void mouseReleased(MouseEvent e){
            x=e.getX();
            y=e.getY();
            bestC();
            if(single_player)
            {
                if((won()==0 && !finish()) &&(state[block(x,y)]==0)) 
                {
                    state[block(x,y)]=first;
                    repaint();
                    if(won()==first)
                        repaint();
                    else if(!finish())
                        state[nextComputer()]=sec;
                }
            }
            else if(!single_player)
            {
                if(tobedone)// initially false
                {
                    if((won()==0 && !finish()) && (state[block(x,y)]==0)) 
                    {
                        state[block(x,y)]=sec;
                        repaint();
                        tobedone=false;    
                    }
                }
                else if((won()==0 && !finish()) && (state[block(x,y)]==0))
                {
                    state[block(x,y)]=first;
                    repaint();
                    tobedone=true;
                }
            }

            repaint();
        }

        public void mouseEntered(MouseEvent e){ }

        public void mouseExited(MouseEvent e){ x1=0;y1=0;}

        public int nextComputer()
        {
            int blockC=-1
            ;//store the block chos3d by the computer to move
            if(CanWin(sec)>=0)//to win computer
            {
                blockC=CanWin(sec);
            }

            else if(CanWin(first)>=0)//to prevent the oponent from winning in very next move
            {
                blockC= CanWin(first);
            }
            else//if oponent cannot win in the very next move then do the best move possible
            {
                for(int i=0;i<9;i++)
                {
                    if(state[best[i]]==0)
                    {
                        blockC=best[i];
                        break;
                    }
                }
            } 
            return blockC;
        }

        public int CanWin(int who)
        {
            int move=-1;
            for(int i=0;i<8;i++)
            {
                int counter=0;
                for(int j=0;j<3;j++)
                {
                    if(state[win[i][j]]==who)
                        counter++;
                }

                if(counter==2)
                {
                    for(int j=0;j<3;j++)
                    {
                        if(state[win[i][j]]==0)
                            move=win[i][j];
                    }
                }
            }
            return move;
        }

        public int won()
        {
            int won=0;
            for(int i=0;i<8;i++)
            {
                if(state[win[i][0]]==sec&&state[win[i][1]]==sec&&state[win[i][2]]==sec)
                {
                    won=sec;
                    break;
                }
                if(state[win[i][0]]==first&&state[win[i][1]]==first&&state[win[i][2]]==first)
                {
                    won=first;
                    break;
                }
            }
            return won;
        }
        
        public boolean allEmpty()
        {
            boolean allEmpty=true;
            for(int i=0;i<9;i++)
            {
                if(state[i]!=0)
                {
                allEmpty=false;
                break;
            }
            }
            return allEmpty;
        }

        public int wonBlock()
        {
            int blockGroup=0;
            for(int i=0;i<8;i++)
            {
                if((state[win[i][0]]==sec&&state[win[i][1]]==sec&&state[win[i][2]]==sec)||(state[win[i][0]]==first&&state[win[i][1]]==first&&state[win[i][2]]==first))
                {
                    blockGroup=i;
                    break;
                }
            }
            return blockGroup;
        }

        public int block(int x, int y)
        {
            int a=0;
            int block =0;
            outer: for(int i=0;i<3;i++)
            {
                for(int j=0;j<3;j++)
                {
                    if((x>pos[j][0] && y>pos[i][1]) && ((x<pos[j+1][0]) && (y<pos[i+1][1])))
                    {
                        block = a;
                        break outer;
                    }
                    a++;
                }
            }
            return block;
        }

        public boolean finish()
        {
            int counter =0;
            for(int i=0;i<9;i++)
            {
                if(state[i]==0)
                {
                    counter = -1;
                    break;
                }
            } 
            if(counter!=0)
                return false;
            else
                return true;
        }

        public int[][] coordinate(int block)
        {
            int a=0;
            int coordinate[][]=new int[2][2];
            outer: for(int i=0;i<3;i++)
            {
                for(int j=0;j<3;j++)
                {
                    if(a==block)
                    {
                        coordinate[0][0]= pos[j][0];
                        coordinate[0][1]= pos[i][1];
                        coordinate[1][0]= pos[j+1][0];
                        coordinate[1][1]= pos[i+1][1];

                    }
                    a++;
                }
            }
            return coordinate;
        }

        public void wait(int n)throws AWTException
        {
            Robot rb = new Robot();
            rb.delay(n);
        }

        public void bestC()
        {
            if(firstMove)
            {
                best[0]=0;best[1]=8;best[2]=6;best[3]=2;best[4]=4;best[5]=1;best[6]=7;best[7]=3;best[8]=5;
            }
            else
            {
                best[0]=4;best[1]=0;best[2]=2;best[3]=6;best[4]=3;best[5]=8;best[6]=1;best[7]=7;best[8]=5;
            }
        }

        public void paintComponent(Graphics g)
        {

            super.paintComponent(g);
            setBackground(BackgroundColor);

            {
                heigth = getHeight();
                width = getWidth();
                pos[0][0]= 0;
                pos[0][1]= 0;
                pos[1][0]= width/3;
                pos[1][1]= heigth/3;
                pos[2][0]=((2*width)/3) ;
                pos[2][1]= ((2*heigth)/3);
                pos[3][0]=width ;
                pos[3][1]= heigth;
            }

            for(int i =0;i<4;i++)
            {
                g.drawLine(pos[i][0],0,pos[i][0],getHeight());
                g.drawLine(0,pos[i][1],getWidth(),pos[i][1]);
            }

            

            

            

            if(won()!=0)
            {
                int coordinate[][]=coordinate(block(x1,y1));
                if(BackgroundColor!=Color.red)
                    g.setColor(Color.red);
                else
                    g.setColor(new Color(Color.red.getRGB()+150));
                g.fillRect(coordinate[0][0]+1,coordinate[0][1]+1,pos[1][0]-pos[0][0]-2,pos[1][1]-pos[0][1]-2);

                if(!single_player)
                {
                    if(won()==2)
                    {
                        g.setColor(RoundColor);
                        g.drawString("Round Won",x1-15,y1);
                    }else
                    {
                        g.setColor(CrossColor);
                        g.drawString("Cross Won",x1-15,y1);
                    }
                }
                else
                {
                    if(won()==sec)
                    {
                        if(sec==1)
                            g.setColor(CrossColor);
                        else
                            g.setColor(RoundColor);
                        g.drawString("Computer Won",x1-20,y1);
                    }else
                    {
                        if(first==1)
                            g.setColor(CrossColor);
                        else
                            g.setColor(RoundColor);
                        g.drawString("Good! You Won",x1-30,y1);
                    }
                }
            }
            else if(finish())
            {
                int coordinate[][]=coordinate(block(x1,y1));
                if(BackgroundColor!=Color.red)
                    g.setColor(Color.red);
                else
                    g.setColor(new Color(Color.red.getRGB()+150));
                g.fillRect(coordinate[0][0]+1,coordinate[0][1]+1,pos[1][0]-pos[0][0]-2,pos[1][1]-pos[0][1]-2);
                g.setColor(Color.BLACK);
                g.drawString("Game Tie",x1,y1);
            }
            else if(state[block(x1,y1)]==0)
            {
                int coordinate[][]=coordinate(block(x1,y1));
                g.setColor(new Color(BackgroundColor.getRGB()-100));
                g.fillRect(coordinate[0][0]+1,coordinate[0][1]+1,pos[1][0]-pos[0][0]-2,pos[1][1]-pos[0][1]-2);
            }
            
            
            
            if(won()!=0)
            {
                if(won()==1)
                {
                    g.setColor(CrossColor);
                }
                if(won()==2)
                {
                    g.setColor(RoundColor);
                }
                int blockGroup = wonBlock();
                int coordinate1[][]=coordinate(win[blockGroup][0]);
                int coordinate2[][]=coordinate(win[blockGroup][1]);
                int coordinate3[][]=coordinate(win[blockGroup][2]);
                if(blockGroup==0||blockGroup==1||blockGroup==2)
                {
                    for(int i=0;i<30;i++)
                    {
                        g.drawLine(coordinate1[0][0],((coordinate1[0][1]+coordinate1[1][1])/2)-15+i,coordinate1[1][0],((coordinate1[0][1]+coordinate1[1][1])/2)-15+i);                           
                        g.drawLine(coordinate2[0][0],((coordinate2[0][1]+coordinate2[1][1])/2)-15+i,coordinate2[1][0],((coordinate2[0][1]+coordinate2[1][1])/2)-15+i);                           
                        g.drawLine(coordinate3[0][0],((coordinate3[0][1]+coordinate3[1][1])/2)-15+i,coordinate3[1][0],((coordinate3[0][1]+coordinate3[1][1])/2)-15+i);                           
                    }
                }
                else if(blockGroup==3||blockGroup==4||blockGroup==5)
                {
                    for(int i=0;i<30;i++)
                    {
                        g.drawLine(((coordinate1[0][0]+coordinate1[1][0])/2)-15+i,coordinate1[0][1],((coordinate1[0][0]+coordinate1[1][0])/2)-15+i,coordinate1[1][1]);
                        g.drawLine(((coordinate2[0][0]+coordinate2[1][0])/2)-15+i,coordinate2[0][1],((coordinate2[0][0]+coordinate2[1][0])/2)-15+i,coordinate2[1][1]);
                        g.drawLine(((coordinate3[0][0]+coordinate3[1][0])/2)-15+i,coordinate3[0][1],((coordinate3[0][0]+coordinate1[1][0])/2)-15+i,coordinate3[1][1]);
                    }
                }
                else if(blockGroup==6)
                {
                    for(int i=0;i<30;i++)
                    {
                        g.drawLine(coordinate1[0][0]+i,coordinate1[0][1],coordinate1[1][0]+i,coordinate1[1][1]);                           
                        g.drawLine(coordinate2[0][0]+i,coordinate2[0][1],coordinate2[1][0]+i,coordinate2[1][1]);
                        g.drawLine(coordinate3[0][0]+i,coordinate3[0][1],coordinate3[1][0]+i,coordinate3[1][1]);

                    }
                }
                else
                {
                    for(int i=0;i<30;i++)
                    {
                        g.drawLine(coordinate1[1][0]+i,coordinate1[0][1],coordinate1[0][0]+i,coordinate1[1][1]);                            
                        g.drawLine(coordinate2[1][0]+i,coordinate2[0][1],coordinate2[0][0]+i,coordinate2[1][1]);                            
                        g.drawLine(coordinate3[1][0]+i,coordinate3[0][1],coordinate3[0][0]+i,coordinate3[1][1]);                            
                    }
                }

            }
            
            
            
            for(int j=0;j<9;j++)
            {

                if(state[j]==1)
                {
                    int coordinate[][]=coordinate(j);

                    for(int i=0;i<20;i++)
                    {
                        g.setColor(CrossColor);
                        g.drawLine(coordinate[0][0]+25+i,coordinate[0][1]+25,coordinate[1][0]-25-i,coordinate[1][1]-25);
                        g.drawLine(coordinate[1][0]-25+i,coordinate[0][1]+25,coordinate[0][0]+25-i,coordinate[1][1]-25);
                    }
                }
                if(state[j]==2)
                {

                    int coordinate[][]=coordinate(j);

                    for(int i=0;i<20;i++)
                    {
                        g.setColor(RoundColor);
                        g.drawOval(coordinate[0][0]+i+10,coordinate[0][1]+i+10,pos[1][0]-pos[0][0]-i-20,pos[1][1]-pos[0][1]-i-20);
                        g.drawOval(coordinate[0][0]+i+10,coordinate[0][1]+i+10,pos[1][0]-pos[0][0]-i-20,pos[1][1]-pos[0][1]-i-20);
                    }
                }
            }
        }
    }
}
 


class chance implements ActionListener
{
    public void actionPerformed(ActionEvent a)
    {
        Main.firstMove=(!Main.firstMove);
        for(int i =0;i<Main.state.length;i++)
        {
            Main.state[i]=0;
        }
        Main.tobedone=false;
    }
}

 class double_player implements ActionListener
{
    public void actionPerformed(ActionEvent a)
    {
        Main.single_player=false;
        for(int i =0;i<Main.state.length;i++)
        {
            Main.state[i]=0;
        }
        Main.tobedone=false;
    }
}

class Interchange implements ActionListener
{
    public void actionPerformed(ActionEvent a)
    {
        if(Main.first==2)
        {
            Main.first=1;
            Main.sec=2;
        }
        else if(Main.first==1)
        {
            Main.first=2;
            Main.sec=1;
        }
        for(int i =0;i<Main.state.length;i++)
        {
            Main.state[i]=0;
        }
        Main.tobedone=false;
    }
}

class single_player implements ActionListener
{
    public void actionPerformed(ActionEvent a)
    {
        Main.single_player=true;
        for(int i =0;i<Main.state.length;i++)
        {
            Main.state[i]=0;
        }
        Main.tobedone=false;
    }
}

class ColorChoser implements ActionListener
{
    public void actionPerformed(ActionEvent a)
    {
        Color color=null; 
        String command = a.getActionCommand();
       
        if(command.substring(1).equals("white"))
        {
            color = Color.white;            
        }
        if(command.substring(1).equals("gray"))
        {
            color = Color.gray;
            
        }
        if(command.substring(1).equals("lightGray"))
        {
            color = Color.lightGray;
            
        }
        if(command.substring(1)=="darkGray")
        {
            color = Color.darkGray; 
        }
        if(command.substring(1).equals("black"))
        {
            color = Color.black; 
        }
        if(command.substring(1).equals("red"))
        {
            color = Color.red; 
        }
        if(command.substring(1).equals("pink"))
        {
            color = Color.pink;
        }
        if(command.substring(1).equals("orange"))
        {
            color = Color.orange; 
        }
        if(command.substring(1).equals("yellow"))
        {
            color = Color.yellow; 
        }
        if(command.substring(1).equals("green"))
        {
            color = Color.green; 
        }
        if(command.substring(1).equals("magenta"))
        {
            color = Color.magenta; 
        }
        if(command.substring(1).equals("cyan"))
        {
            color = Color.cyan; 
        }
        if(command.substring(1).equals("blue"))
        {
            color = Color.blue; 
        }
        
        
        if(command.charAt(0)=='B')
        {
            
            Main.BackgroundColor=color;
            
        }
        if(command.charAt(0)=='C')
        {
           
            Main.CrossColor=color;
            
        }
        if(command.charAt(0)=='R')
        {
            
            Main.RoundColor=color;
            
        }

    }
}